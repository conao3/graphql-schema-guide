= 各種Tips

TODO

//comment{
 * 技術書典で得た知見の話
 ** 色々ありすぎるのでは？
 * 画面の都合とGraphQL
 ** Queryの話(クライアント気にしなくていい)
 ** Mutationの話(クライアント気にしたほうがいい)
 * エラーハンドリングパターン
 ** いまんとこ妙案なし
 * schemaでざっくりしたtype毎に定義を分割する話
 ** Mutationを画面フレンドリーにしようとして爆発四散する話
 * directiveの話
 ** 権限制御に使う話とか
 * コードの実装の整理の仕方の話
 ** ドメイン層とGraphQL層を分けるとかそういう
 * どういう時にエラーが発生することが許されるか
 ** 基本的にはQueryではエラーにしない
 ** 検索条件によるエラーは許容してもいいかも… でもドキュメントに書いたほうがよいしなるべくデフォルト値を適用してあげたい
 * gRPCとGraphQL
 * コードファーストの罠
 ** IntrospectionQueryではdirective取れないので注意という話
 * postmanの話？
 ** https://twitter.com/vvakame/status/1153654008952659969
 * ロギングの話
 * GraphQLの操作のコピペビリティの話
 ** MutationだろうとQueryだろうとコピペして誰かに伝えることができる
 ** REST APIだとエンドポイントとデータ・フォーマットとetc... を伝える必要があり、改変も難しい
 ** Issueにログ取るもよし、Slackに貼ってChatOps的ご利益を得るもよし…
 * ビジネスロジック寄りのフィールドを用意してもいいんだよという話
 ** resolverだけでフィールドは作れる(仮想？)
 * フィールドに@<code>{event: Event}をもつ場合、@<code>{eventID: ID}はomitすべきか？
 ** omitすると単にeventIDだけほしい場合にちょっと困る
 ** event.id すればいいんだけど、resolverの実装的にはDBへ1アクセス必要になる場合が多いはず
 ** その他実体は遅延ロードできるとよさそうだけどコードが複雑になるよね
 ** 今はomit派でやってるけどはてさて…？（id引きの場合通常memcacheとかでひっかかるはずという期待もある）
//}
