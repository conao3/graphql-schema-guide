= リアルワールドスキーマ（副題：技術書典Web 一般チケット販売開発日記）

この章では、技術書典Webで一般チケット販売の機能を追加開発する時の方法論を記録していきます。
別の言い方をすると、一般チケット販売の機能をこれからでっち上げないといけない事実があり、ドタバタとそれを開発するログを綴っていきます。

=== 8月27日（火） 日記を書き始める

前回の技術書典6では事故なく終えることができ、また沢山の本が貰われていってよかったです。
他方改善点も多くあり、運営としては7でのよりスムーズな開催にむけてがんばっています。

今回は改善の一環として入場チケット販売について前売り方式へと変更を予定しています。
2フロアへ増床したことももちろん影響していますが、前回は参加者の皆様のやっていきが高まった結果、入場チケット販売開始前に自律的（なし崩し的）に列形成が始まってしまいました。
これにより会場外でのチケット販売を行わざるをえなくなりました。
これは施設側担当者との事前の打ち合わせとは異なる形であったため、今回は列が膨らまない対策が求められます。

技術季報の販売なども考慮する必要がありますが、運営としては安全を最優先に考え、改善をすすめます。

そこで、今回は事前にチケットを販売することになります。
なりました。
そのためには、Webサイト上でチケットを販売するシステムを組む必要があります。
やっていきましょう。

なるべく早めに着手する必要がありますが、会場のレイアウトや導線の検討が必要→サークルの配置会議→Webサイト一般公開作業 に忙殺されていて作業が進むわけもなく…。
現時点でシステム面は未着手です。
進捗0%です！

幸い、どういう流れで当日を迎えるか、どういうシステムを組めば実現可能かの相談は終わっています。
あとは、実装していくだけです…。

要件メモ。
販売するのは3枠。
11時 Cホール枠、11時 Dホール枠、12時枠。
規定数を販売したら終了。

設計メモ。
Datastore上での同一Entityへのトランザクション処理はさほど速度が出ないと考えられる。
なので1チケット1Entityで事前にデータを用意し、購入したい人に対してそれを個別に割り当てていく方法で実現する。
PayPalとStripeで決済を行うプロセスが挟まるので、チケットをロック→決済→確定、もし決済されなかったら一定時間で解放という実装でよいはず。

作業メモ。
サーバAPI実装、Webフロントエンド実装、もしかしたらモバイルアプリ改修（作業担当者は別）、運営アプリ改修（これも作業担当者は別）が必要になる。
大変そうですねぇ。

さて、自分の原稿を諸般の事情により8月中に一定量書ききらないといけないので、続きはまた今度…。

=== 8月28（水）番宣 サークル配置運営裏話

はい。
システム開発には全然入ってないんですが、技術季報用の収録をしたので宣伝します。
僕とsfujiwaraで技術書典のサークル配置の現状と展望についてお話しました。
席配置といってるけど、これは完全に要件定義から始まるシステム開発ですよ。
運営裏話ということで比較的面白そうなネタをしゃべることができたので、みんな買ってみてね！

…と、書いたはいいけどみなさんがこの本を買って帰って読んでくれたとして、今から会場に買いに戻るのは難しいわけですね…。
運良く買ってた人は読んでみてね！
そのうち電子版も売ると思うよ！たぶん！

=== 8月30日（金）番宣 将来の展望 運営表話

はい。
システム開発には全然入ってないんですが、以下略。
僕とmhidakaで技術書典の将来の展望とか夢とかについてお話しました。
本当は羊とたかはしさんが話したほうがいいと思うんだけどさまざまな人間が無駄に忙しいのでこうなったんだと思います。
職場が同じというアドバンテージを最大限活用していく…！

買ってね！

=== 9月1日（日）開発に着手する

9月に突入しました。
8月中に某所に何らかの原稿を送るという謎ミッションがあったのですが、@<chapref>{github}と@<chapref>{relay}あたりの原稿を送っておきました。
わりといい話になっているというか、他の人がしてないタイプの話を書けている気はするんですよね。
価値があるかはいまいちわかりませんが。

さて、そんなわけで9月に入ったのでチケットシステムの開発に着手しました。
GraphQL以前の開発では、DB周りのコード書く→ビジネスロジック的なところ書く→REST APIハンドラ周り書く→Webフロントエンド書く、みたいな手順でした。
GraphQL導入以降、GraphQLスキーマを書く→GraphQL APIハンドラ周り書く→DB周りのコードを書く→ビジネスロジック的なところ書く→Webフロントエンド書く、みたいな手順で作業するようになりました。

#@# prh:disable:良い
これが良いか悪いかというと、軽微な改修の場合は良し、今回のような重たい改修の場合は悪し、という気がします。
やはりアプリケーションのキモはDB、つまりはデータ構造でしょう。
そして、データを駆動するのはビジネスロジックです。

最初から完璧に設計できることは期待できないので、やりながらエッジケースやユースケースを自分の中で育てていきます。
よね？
であれば、DB周りとビジネスロジックを最初に作り始めるのは理にかなっています。

一方、GraphQLのスキーマから入るとデータの構造とその関係性にどうしても目が行ってしまいます。
本来であれば、@<code>{EventTicket}は@<code>{EventID: String}を持ちますが、スキーマ上は@<code>{event: Event}と表現されます。
どうやら僕の場合、ここで微妙に脳の処理容量を持っていかれるようで、エッジケースの検出が甘くなる傾向がある気がします。
これが今後訓練次第で解決されるのか@<fn>{most-important-solution}は不明です。

//footnote[most-important-solution][プレッシャーの少ない環境でよく寝て時間をかけて設計しろという指摘がもっとも正しい]

とりあえず疲れて曖昧な気持ちでスキーマ書いてても自分の作ったlintルールが一貫性ぶっ壊れているところを指摘してくれる。
怒られたら直す。
平和守られる。
みんなもlintルール書け！

#@# prh:disable:一通り
そんなわけで、最初は@<code>{EventTicket}カインドを用意して、これに対する実装を一通り作成…したのですが、問題があると気が付きます。
8月27日に書いたとおり、@<code>{EventTicket}は1エンティティ=1チケットという構造です。
なのでチケットの名称・価格・販売開始・終了日時の制御などを行うためのマスタデータ的なものが必要でした。

とりあえず気がついたので@<code>{EventTicketInfo}カインドを追加して再実装。
DB周りとビジネスロジックの仮組みを先にやっておけば手戻りが少なかったものを…！
もしくは、完成する画面の脳内での作り込みが甘かったせいで適切なデータ構造を導けなかった。
普段の僕だったら手を動かす前にその辺気がついててエッジケースとかもだいたい潰せてると思うんだけどなぁ…（自信過剰）。

それにしても@<code>{EventTicketInfo}という名前はよくない気がするなー…。
@<code>{EventTicketTemplate}とか@<code>{EventTicketCatalog}とかが妥当な気がする。
@<code>{EventTicketMaster}はちょっとやだな。
テーブル名として考えるとまぁ妥当なんだけど1エンティティを指す語として見ると適当ではない。
後日変えるかも。

とりあえず回り道したけど、GraphQLスキーマ作ってサーバ実装作って課金周りのコードも書いた。
テスト全然書いてないのでヤバそうな箇所を対象にテストもりもり書いたらサーバ側は終わり、あとフロントエンド。
多少余裕持って考えるとここからあと2人日くらいはかかってしまいそうな気がする。

全然関係ないけど git.apache.org が落ちてるようで、CIがまったく通らん。
おつらい…。

=== 9月2日（月）テストを書くとバグが見つかるんだな

月曜日なので仕事です。
仕事をしている場合ではない気がするんだけど…？

git.apache.org が落ちっぱなしなので@<code>{go.mercari.io/datastore}@<fn>{mercari-datastore}の依存関係更新したりしてた。
Datastoreは一括Put500件、Get1000件の制限があり、GraphQLの場合一気に何件Getするかわからないのでたまにエラーになる。
これを回避するために自動的に処理を分割してくれるミドルウェアを書いて投入してみたんだけど、わりと便利かもしれない。
EventTicketを一気に4000件Putするような雑なテストを書いてもエラーにならなくなった。

//footnote[mercari-datastore][@<href>{https://godoc.org/go.mercari.io/datastore}]

昨日書いたコードにテストを書くと、それなりにバグが見つかる。
Go言語の@<code>{time.Time}の@<code>{Before}と@<code>{After}は何回考えて実装してもテスト書くと絶対間違ってる。

画面から逆算してスキーマを見直していったんAPI実装はこれで終わり！
あれやらこれやらが足りない気もするけど付属要素なので後からちょいちょいすればいいでしょ。

販売システムと当日運用システムはまた別なので悩ましいところだ。
まずは販売だけできるようにしなければ…。
